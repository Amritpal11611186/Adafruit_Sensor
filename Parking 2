void setup() {
  Serial.begin(115200);  //Initialize serial

  WiFi.mode(WIFI_STA);
  ThingSpeak.begin(client);  // Initialize ThingSpeak
  lcd.begin(16, 2);
  // Print a message to the LCD.
  lcd.print("Smart Parking");
  pinMode(36, INPUT);
  pinMode(39, INPUT);
  pinMode(32,OUTPUT);
  pinMode(33,OUTPUT);
  pinMode(25,INPUT);
  pinMode(26,INPUT);
  pinMode(27,INPUT);
  myservo.setPeriodHertz(50);    // standard 50 hz servo
  myservo.attach(servoPin, 1000, 2000); // attaches the servo on pin 18 to the servo object
  delay(5000);
  SerialBT.begin("Smart Parking"); //Bluetooth device name
  // using default min/max of 1000us and 2000us
  // different servos may require different min/max settings
  // for an accurate 0 to 180 sweep
   if (WiFi.status() != WL_CONNECTED) {
    Serial.print("Attempting to connect to SSID: ");
    lcd.clear();
    lcd.print("Connecting Wi-Fi");
    Serial.println(SECRET_SSID);
    if  (WiFi.status() != WL_CONNECTED) {
      WiFi.begin(ssid, pass);  // Connect to WPA/WPA2 network. Change this line if using open or WEP network
      Serial.print(".");
      delay(5000);
    }
    lcd.clear();
    lcd.print("Ready..........");
    Serial.println("\nConnected.");
    delay(2000);
  }
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Cars Inside");
  lcd.setCursor(14, 0);
  lcd.print(cars);
  lcd.print("  ");
}

void loop() {

  // Connect or reconnect to WiFi

   if (SerialBT.available()) {
    char z;
    z=SerialBT.read();
    if(z=='a')
    {
      digitalWrite(32,HIGH);
      digitalWrite(33,HIGH);
      delay(500);
      digitalWrite(33,LOW);
    }
    else if(z=='b')
    {
      digitalWrite(32,LOW);
       digitalWrite(33,HIGH);
      delay(500);
      digitalWrite(33,LOW);
    }
  }
